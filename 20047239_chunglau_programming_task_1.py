# -*- coding: utf-8 -*-
"""UFCFVQ-15-M Programming Task 1 Template.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hgH1541_JD9UoJlIRbfUSwbvxYydat3u

# UFCFVQ-15-M Programming for Data Science
# Programming Task 1

## Student Id: 20047239

### Requirement FR1.1 - Find the arithmetic mean
"""

# add code here
def arithmetic_mean(data_list):
  # define initial value of sum
  sum = 0
  # get the total value in list
  for d in data_list:
    sum += d
  # total / length of list
  mean = sum / len(data_list)
  # return result
  return mean

# Alternative approach
def arithmetic_mean_improve(data_list):
  return sum(data_list) / len(data_list)

# Testing
data = [1,2,3,4,5,6,7,8,9,10]
mean = arithmetic_mean(data)
print(mean)

"""### Requirement FR1.2 - Find the standard deviation"""

# add code here
from math import sqrt

def standard_deviation(data_list):
  # get mean of the list
  mean = arithmetic_mean_improve(data_list)
  sum = 0
  for d in data_list:
    sum += (d - mean) * (d - mean)
  sum /= len(data_list)
  return sqrt(sum)

def standard_deviation_improve(data_list):
  from math import pow
  mean = arithmetic_mean_improve(data_list)
  sum = 0
  for d in data_list:
    sum += pow((d - mean), 2)
  sum /= len(data_list)
  return sqrt(sum)  

# Testing
data = [1,2,3,4,5,6,7,8,9,10]
sd = standard_deviation(data)
print(sd)

"""### Requirement FR1.3 - Find the min/max values """

# add code here
def find_min(data_list):
  target = 99999
  for d in data_list:
    if d < target: 
      target = d
  return target

def find_max(data_list):
  target = -99999
  for d in data_list:
    if d > target: 
      target = d
  return target

def find_max_or_min(data_list, target):
  sorted_data = sorted(data_list)
  if target == 'max': 
    return sorted_data[-1]
  else:
    return sorted_data[0]

# Testing
data = [1,2,3,4,5,6,7,8,9,10]
min_value = find_min(data)
print(min_value)

max_value = find_max(data)
print(max_value)

"""### Requirement FR1.4 - Find the 25th percentile """

# add code here
def percentile_25th(data_list):  
  sorted_list = sorted(data_list)
  r = 25 / 100 * len(sorted_list)
  index = round(r)
  return data_list[index]

# Testing
data = [1,2,3,4,5,6,7,8,9,10]
print(percentile_25th(data))

"""### Requirement FR1.5 - Find the 50th percentile"""

# add code here
def percentile_50th(data_list):  
  sorted_list = sorted(data_list)
  r = 50 / 100 * len(sorted_list)
  index = round(r)
  return data_list[index]

# Testing
data = [1,2,3,4,5,6,7,8,9,10]
print(percentile_50th(data))

"""### Requirement FR1.6 - Find the 75th percentile"""

# add code here
def percentile_75th(data_list):  
  sorted_list = sorted(data_list)
  r = 75 / 100 * len(sorted_list)
  index = round(r)
  return data_list[index]

# Testing
data = [1,2,3,4,5,6,7,8,9,10]
print(percentile_75th(data))


# Improvement
def percentile_nth(data_list, nth):  
  sorted_list = sorted(data_list)
  r = nth / 100 * len(sorted_list)
  index = round(r)
  return data_list[index]

# Testing
data = [1,2,3,4,5,6,7,8,9,10]
print(percentile_nth(data, 75))

"""### Requirement FR1.7 - Print the set of summary statistics in tabular form"""

# add code here
def summary(data_list):
  print("count\t", len(data_list))
  print("mean\t", arithmetic_mean_improve(data_list))
  print("std\t", standard_deviation_improve(data_list))
  print("min\t", find_max_or_min(data_list, 'min'))
  print("25%\t", percentile_nth(data_list, 25))
  print("50%\t", percentile_nth(data_list, 50))
  print("75%\t", percentile_nth(data_list, 75))
  print("max\t", find_max_or_min(data_list, 'max'))
  
# Testing
data = [1,2,3,4,5,6,7,8,9,10]
summary(data)

"""### Requirement FR1.8 - Read data from a file into memory"""

# add code here
# define a list data structure
data_list = []
# define the file path
data_path = 'task1.dat'
# read all lines in the file and store to the data_list
with open(data_path, "r") as task1_data:
    data_list = task1_data.readlines()

print(data_list)

# Improvement
def get_data_from_file(data_path):
  # define a list data structure
  data_list = []
  # read all lines in the file and store to the data_list
  with open(data_path, "r") as task1_data:
      data_list = task1_data.readlines()
  return data_list

"""### Requirement FR1.9 - Design and build a data structure to store CSV data in memory"""

# add code here

"""### Requirement FR1.10 - Create and demonstrate a function to read CSV data from a file into memory"""

# add code here
data_structure = [
    {
      'Pregnancies': 1.0, 
      'Glucose': 93.0, 
      'BloodPressure': 70.0, 
      'SkinThickness': 31.0, 
      'Insulin': 0.0, 
      'BMI': 30.4, 
      'DiabetesPedigreeFunction': 0.315, 
      'Age': 23.0, 
      'Outcome': 0.0
    }
]

"""### Requirement FR1.11 - Create and demonstrate a generic statistical summary function """

# add code here
def get_data_from_csv_file(data_path):
    # define the final data list
    result = []
    # read the csv file
    with open(data_path, 'r') as f:
        # get all the lines
        lines = f.readlines()
        # the first line is the header
        # get the header for the key of the dictionary
        header = lines[0].split(',')
        # read the rest of the file (skip row 1)
        for line in lines[1:]:
            # split the row by comma
            columns = line.split(',')
            # define the dictionary to store the data
            data = {}
            # read the column 1 by 1
            for i in range(len(columns)):
                # get the header for the key
                key = header[i]
                # get the value
                val = columns[i]
                # store data into the dictionary
                data[key] = val
            # append data to list
            result.append(data)
    # return result
    return result

"""### Requirement FR1.12 - Create and demonstrate a function to print a custom table"""

# add code here
def calculate_statictics_from_csv(data_path, header):
  row_dicts = get_data_from_csv_file(data_path)
  data_list = []
  for row in row_dicts:
    data_list.append(row[header])
  summary(data_list)

# Testing
data_path = 'task1.csv'
calculate_statictics_from_csv(data_path, 'SkinThickness')

"""# Process Development Report for Task 1

### Requirement FR1.1
#### Pseudo code
```
  average is total / the length of data
```

#### Strength
``` 
  Show all the steps clearly
```

#### Improvement
```
  Reduce the size of code
```

### Requirement FR1.2

#### Pseudo code
```
  sum of (x1 - mean) ^ 2 --> A
  A / the length of data --> B
  result = Sqrt(B) 
```

#### Stength
```
  show all the steps clearly
```

### Improvement 
```
  use math library to calculate the power of
```

##Requirement FR1.3

####pseudo code
```
  define a initial value for comparing values
```

####weakness:
```
  The initial value can't cater all cases
```

####improvement:
```
  sort the data list first and get the first(min) or last(max).
```

##Requirement FR1.4

####pseudo code
```
sort the data in ascending order
target(%) * the length of data --> A
round A to integer --> B
get the data list at B index
```

####weakness:
```
  The function is not flexible enough
```

####improvement:
```
  Add a parameter to define the target
```

#Requirement FR1.8

####weakness:
```
  The function is not flexible enough
```

####improvement:
```
  Define a function for getting data from a file
```
"""